#!/usr/bin/env lua

local contents  = table.concat({select(3, ...)}, ' ')
local data      = {}
local variables = {}
local ops       = {}
local ignorec 
local inresult
local done

local function resolveData()
    return data.type == 'variable' and (variables[data.value] or 'nil') or
           data.value
end

local function callDone()
    if done then
        done()
        done = nil
    end
end

local function setDone(value)
    data = {}
    done = value
end

local function finalise()
    callDone()
    data = {}
end

local function op(action, type)
    return function()
        callDone()
        local cache, dcache  = resolveData(), done
        data = {}
        setDone(function()
            data.value = action(cache, resolveData())
            data.type  = type
            done = dcache
            callDone()
        end)
    end
end

ops = {
    ['%d'] = function(num)
        data.type = 'number'
        data.value = tonumber((data.value or '') .. num)
    end,
    ['%a'] = function(char)
        if data.type ~= 'number' then
            data.type  = data.type or 'variable'
            data.value = (data.value or '') .. char
        else
            finalise() -- implies the ;
            ops['%a'](char) -- parse again
        end
    end,
    ['"'] = function()
        data.ps = not data.ps
        data.type = 'string'
    end,
    ['%s'] = function(char)
        if data.ps then
            ops['%a'](char) -- in a string
        end
    end,
    ['+']  = op(function(a, b) return a + b end, 'number'),
    ['-']  = op(function(a, b) return a - b end, 'number' ),
    ['*']  = op(function(a, b) return a * b end, 'number'),
    ['/']  = op(function(a, b) return a / b end, 'number'),
    ['=']  = op(function(a, b) return a == b and 1 or 0 end, 'number'),
    [':']  = function()
        local lex = data.value
        setDone(function()
            variables[lex] = resolveData()
        end)
    end,
    ['!'] = function()
        callDone()
        print(resolveData())
        data = {}
    end,
    ['?'] = function()
        callDone()
        ignorec = resolveData() == 0
        data = {}
    end,
    [';'] = finalise
}

for i = 1, #contents do
    local token = contents:sub(i, i)
    if token == '|' then
        if not inresult then
            finalise()
            inresult = true
        else
            inresult, ignorec = false, false
        end
    else
        for k,v in pairs(ops) do
            if not ignorec and token:match(k) then
                v(token)
                break
            end
        end
    end
end
